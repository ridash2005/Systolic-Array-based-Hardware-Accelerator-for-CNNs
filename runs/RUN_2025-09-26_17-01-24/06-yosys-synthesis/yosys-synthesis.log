
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /home/hp/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/06-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: rtl/top_wrapper.v
Parsing SystemVerilog input from `rtl/top_wrapper.v' to AST representation.
Storing AST representation for module `$abstract\top_wrapper'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: rtl/pe_mac.v
Parsing SystemVerilog input from `rtl/pe_mac.v' to AST representation.
Storing AST representation for module `$abstract\PE_MAC'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: rtl/systolic4x4.v
Parsing SystemVerilog input from `rtl/systolic4x4.v' to AST representation.
Storing AST representation for module `$abstract\Systolic4x4'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: rtl/serializer.v
Parsing SystemVerilog input from `rtl/serializer.v' to AST representation.
Storing AST representation for module `$abstract\serializer'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: rtl/deserializer.v
Parsing SystemVerilog input from `rtl/deserializer.v' to AST representation.
Storing AST representation for module `$abstract\deserializer'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: rtl/systolic4x4_serial_io.v
Parsing SystemVerilog input from `rtl/systolic4x4_serial_io.v' to AST representation.
Storing AST representation for module `$abstract\Systolic4x4_serial_io'.
Successfully finished Verilog frontend.

8. Executing HIERARCHY pass (managing design hierarchy).

9. Executing AST frontend in derive mode using pre-parsed AST for module `\Systolic4x4_serial_io'.
Generating RTLIL representation for module `\Systolic4x4_serial_io'.

9.1. Analyzing design hierarchy..
Top module:  \Systolic4x4_serial_io
Parameter \WIDTH = 512

9.2. Executing AST frontend in derive mode using pre-parsed AST for module `\serializer'.
Parameter \WIDTH = 512
Generating RTLIL representation for module `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Parameter \ROWS = 4
Parameter \COLS = 4
Parameter \K = 4

9.3. Executing AST frontend in derive mode using pre-parsed AST for module `\Systolic4x4'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Parameter \ROWS = 4
Parameter \COLS = 4
Parameter \K = 4
Generating RTLIL representation for module `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4'.
Warning: Replacing memory \B_shift with list of registers. See rtl/systolic4x4.v:82
Warning: Replacing memory \A_shift with list of registers. See rtl/systolic4x4.v:79
Parameter \WIDTH = 128

9.4. Executing AST frontend in derive mode using pre-parsed AST for module `\deserializer'.
Parameter \WIDTH = 128
Generating RTLIL representation for module `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000'.
Parameter \WIDTH = 128
Found cached RTLIL representation for module `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000'.

9.5. Analyzing design hierarchy..
Top module:  \Systolic4x4_serial_io
Used module:     $paramod\serializer\WIDTH=s32'00000000000000000000001000000000
Used module:     $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4
Used module:     $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32

9.6. Executing AST frontend in derive mode using pre-parsed AST for module `\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Generating RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Reprocessing module $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4 because instantiated module $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC has become available.
Generating RTLIL representation for module `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4'.
Warning: Replacing memory \B_shift with list of registers. See rtl/systolic4x4.v:82
Warning: Replacing memory \A_shift with list of registers. See rtl/systolic4x4.v:79

9.7. Analyzing design hierarchy..
Top module:  \Systolic4x4_serial_io
Used module:     $paramod\serializer\WIDTH=s32'00000000000000000000001000000000
Used module:     $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4
Used module:     $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.
Parameter \AW = 8
Parameter \BW = 8
Parameter \ACCW = 32
Found cached RTLIL representation for module `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC'.

9.8. Analyzing design hierarchy..
Top module:  \Systolic4x4_serial_io
Used module:     $paramod\serializer\WIDTH=s32'00000000000000000000001000000000
Used module:     $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4
Used module:         $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC
Used module:     $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000

9.9. Analyzing design hierarchy..
Top module:  \Systolic4x4_serial_io
Used module:     $paramod\serializer\WIDTH=s32'00000000000000000000001000000000
Used module:     $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4
Used module:         $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC
Used module:     $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000
Removing unused module `$abstract\Systolic4x4_serial_io'.
Removing unused module `$abstract\deserializer'.
Removing unused module `$abstract\serializer'.
Removing unused module `$abstract\Systolic4x4'.
Removing unused module `$abstract\PE_MAC'.
Removing unused module `$abstract\top_wrapper'.
Removed 6 unused modules.
Renaming module Systolic4x4_serial_io to Systolic4x4_serial_io.

10. Generating Graphviz representation of design.
Writing dot description to `/home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/06-yosys-synthesis/hierarchy.dot'.
Dumping module Systolic4x4_serial_io to page 1.

11. Executing TRIBUF pass.

12. Executing HIERARCHY pass (managing design hierarchy).

12.1. Analyzing design hierarchy..
Top module:  \Systolic4x4_serial_io
Used module:     $paramod\serializer\WIDTH=s32'00000000000000000000001000000000
Used module:     $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4
Used module:         $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC
Used module:     $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000

12.2. Analyzing design hierarchy..
Top module:  \Systolic4x4_serial_io
Used module:     $paramod\serializer\WIDTH=s32'00000000000000000000001000000000
Used module:     $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4
Used module:         $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC
Used module:     $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000
Removed 0 unused modules.

13. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

14. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$rtl/pe_mac.v:43$58 in module $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.
Marked 1 switch rules as full_case in process $proc$rtl/pe_mac.v:35$55 in module $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.
Marked 1 switch rules as full_case in process $proc$rtl/pe_mac.v:24$53 in module $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.
Marked 2 switch rules as full_case in process $proc$rtl/serializer.v:30$19 in module $paramod\serializer\WIDTH=s32'00000000000000000000001000000000.
Marked 2 switch rules as full_case in process $proc$rtl/deserializer.v:79$50 in module $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.
Marked 1 switch rules as full_case in process $proc$rtl/deserializer.v:68$48 in module $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.
Marked 1 switch rules as full_case in process $proc$rtl/deserializer.v:57$45 in module $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.
Marked 4 switch rules as full_case in process $proc$rtl/deserializer.v:26$39 in module $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.
Marked 4 switch rules as full_case in process $proc$rtl/systolic4x4.v:99$142 in module $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.
Removed a total of 0 dead cases.

15. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 85 assignments to connections.

16. Executing PROC_INIT pass (extract init attributes).

17. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:43$58'.
Found async reset \rst_n in `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:35$55'.
Found async reset \rst_n in `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:24$53'.
Found async reset \rst_n in `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.$proc$rtl/serializer.v:30$19'.
Found async reset \rst_n in `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:79$50'.
Found async reset \rst_n in `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:68$48'.
Found async reset \rst_n in `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:57$45'.
Found async reset \rst_n in `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:26$39'.
Found async reset \rst_n in `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.

18. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~15 debug messages>

19. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:43$58'.
     1/1: $0\acc_reg[31:0]
Creating decoders for process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:35$55'.
     1/1: $0\prod_reg[15:0]
Creating decoders for process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:24$53'.
     1/2: $0\B_reg[7:0]
     2/2: $0\A_reg[7:0]
Creating decoders for process `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.$proc$rtl/serializer.v:30$19'.
     1/4: $0\transmitting[0:0]
     2/4: $0\shift_reg[511:0]
     3/4: $0\bit_idx[8:0]
     4/4: $0\serial_data[0:0]
Creating decoders for process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:79$50'.
     1/2: $0\data_valid[0:0]
     2/2: $0\parallel_data[127:0]
Creating decoders for process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:68$48'.
     1/2: $0\serial_toggle_sync2[0:0]
     2/2: $0\serial_toggle_sync1[0:0]
Creating decoders for process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:57$45'.
     1/2: $0\word_buffer[127:0]
     2/2: $0\serial_toggle[0:0]
Creating decoders for process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:26$39'.
     1/6: $0\shift_reg[127:0] [127:1]
     2/6: $0\shift_reg[127:0] [0]
     3/6: $0\serial_word_ready[0:0]
     4/6: $0\receiving[0:0]
     5/6: $0\serial_word[127:0]
     6/6: $0\bit_idx[6:0]
Creating decoders for process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
Creating decoders for process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
     1/99: $4\rr[31:0]
     2/99: $4\cc[31:0]
     3/99: $0\C_out[511:0] [511:480]
     4/99: $0\C_out[511:0] [479:448]
     5/99: $0\C_out[511:0] [447:416]
     6/99: $0\C_out[511:0] [415:384]
     7/99: $0\C_out[511:0] [383:352]
     8/99: $0\C_out[511:0] [351:320]
     9/99: $0\C_out[511:0] [319:288]
    10/99: $0\C_out[511:0] [287:256]
    11/99: $0\C_out[511:0] [255:224]
    12/99: $0\C_out[511:0] [223:192]
    13/99: $0\C_out[511:0] [191:160]
    14/99: $0\C_out[511:0] [159:128]
    15/99: $0\C_out[511:0] [127:96]
    16/99: $0\C_out[511:0] [95:64]
    17/99: $0\C_out[511:0] [63:32]
    18/99: $0\C_out[511:0] [31:0]
    19/99: $3\rr[31:0]
    20/99: $3\s[31:0]
    21/99: $0\done[0:0]
    22/99: $0\load_acc[0:0]
    23/99: $2\load_shift_buffers$func$rtl/systolic4x4.v:107$141.j[31:0]$151
    24/99: $2\load_shift_buffers$func$rtl/systolic4x4.v:107$141.i[31:0]$150
    25/99: $2\s[31:0]
    26/99: $2\cc[31:0]
    27/99: $2\rr[31:0]
    28/99: $1\load_shift_buffers$func$rtl/systolic4x4.v:107$141.j[31:0]$147
    29/99: $1\load_shift_buffers$func$rtl/systolic4x4.v:107$141.i[31:0]$146
    30/99: $1\s[31:0]
    31/99: $1\cc[31:0]
    32/99: $1\rr[31:0]
    33/99: $0\B_shift[31][7:0]
    34/99: $0\B_shift[30][7:0]
    35/99: $0\B_shift[29][7:0]
    36/99: $0\B_shift[28][7:0]
    37/99: $0\B_shift[27][7:0]
    38/99: $0\B_shift[26][7:0]
    39/99: $0\B_shift[25][7:0]
    40/99: $0\B_shift[24][7:0]
    41/99: $0\B_shift[23][7:0]
    42/99: $0\B_shift[22][7:0]
    43/99: $0\B_shift[21][7:0]
    44/99: $0\B_shift[20][7:0]
    45/99: $0\B_shift[19][7:0]
    46/99: $0\B_shift[18][7:0]
    47/99: $0\B_shift[17][7:0]
    48/99: $0\B_shift[16][7:0]
    49/99: $0\B_shift[15][7:0]
    50/99: $0\B_shift[14][7:0]
    51/99: $0\B_shift[13][7:0]
    52/99: $0\B_shift[12][7:0]
    53/99: $0\B_shift[11][7:0]
    54/99: $0\B_shift[10][7:0]
    55/99: $0\B_shift[9][7:0]
    56/99: $0\B_shift[8][7:0]
    57/99: $0\B_shift[7][7:0]
    58/99: $0\B_shift[6][7:0]
    59/99: $0\B_shift[5][7:0]
    60/99: $0\B_shift[4][7:0]
    61/99: $0\B_shift[3][7:0]
    62/99: $0\B_shift[2][7:0]
    63/99: $0\B_shift[1][7:0]
    64/99: $0\B_shift[0][7:0]
    65/99: $0\A_shift[31][7:0]
    66/99: $0\A_shift[30][7:0]
    67/99: $0\A_shift[29][7:0]
    68/99: $0\A_shift[28][7:0]
    69/99: $0\A_shift[27][7:0]
    70/99: $0\A_shift[26][7:0]
    71/99: $0\A_shift[25][7:0]
    72/99: $0\A_shift[24][7:0]
    73/99: $0\A_shift[23][7:0]
    74/99: $0\A_shift[22][7:0]
    75/99: $0\A_shift[21][7:0]
    76/99: $0\A_shift[20][7:0]
    77/99: $0\A_shift[19][7:0]
    78/99: $0\A_shift[18][7:0]
    79/99: $0\A_shift[17][7:0]
    80/99: $0\A_shift[16][7:0]
    81/99: $0\A_shift[15][7:0]
    82/99: $0\A_shift[14][7:0]
    83/99: $0\A_shift[13][7:0]
    84/99: $0\A_shift[12][7:0]
    85/99: $0\A_shift[11][7:0]
    86/99: $0\A_shift[10][7:0]
    87/99: $0\A_shift[9][7:0]
    88/99: $0\A_shift[8][7:0]
    89/99: $0\A_shift[7][7:0]
    90/99: $0\A_shift[6][7:0]
    91/99: $0\A_shift[5][7:0]
    92/99: $0\A_shift[4][7:0]
    93/99: $0\A_shift[3][7:0]
    94/99: $0\A_shift[2][7:0]
    95/99: $0\A_shift[1][7:0]
    96/99: $0\A_shift[0][7:0]
    97/99: $0\cycle_cnt[31:0]
    98/99: $0\running[0:0]
    99/99: $3\cc[31:0]

20. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[0]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[1]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[2]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[3]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[4]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[5]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[6]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[7]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[8]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[9]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[10]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[11]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[12]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[13]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[14]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_wires[15]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[0]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[1]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[2]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[3]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[4]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[5]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[6]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[7]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[8]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[9]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[10]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[11]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[12]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[13]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[14]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_wires[15]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[0]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[1]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[2]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[3]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[4]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[5]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[6]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[7]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[8]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[9]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[10]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[11]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[12]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[13]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[14]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_outs[15]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[0]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[1]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[2]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[3]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[4]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[5]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[6]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[7]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[8]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[9]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[10]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[11]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[12]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[13]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[14]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_outs[15]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[0]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[1]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[2]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[3]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[4]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[5]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[6]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[7]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[8]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[9]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[10]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[11]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[12]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[13]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[14]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
No latch inferred for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\acc_wires[15]' from process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.

21. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.\acc_reg' using process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:43$58'.
  created $adff cell `$procdff$827' with positive edge clock and positive level reset.
Creating register for signal `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.\prod_reg' using process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:35$55'.
  created $adff cell `$procdff$832' with positive edge clock and positive level reset.
Creating register for signal `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.\A_reg' using process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:24$53'.
  created $adff cell `$procdff$837' with positive edge clock and positive level reset.
Creating register for signal `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.\B_reg' using process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:24$53'.
  created $adff cell `$procdff$842' with positive edge clock and positive level reset.
Creating register for signal `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.\serial_data' using process `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.$proc$rtl/serializer.v:30$19'.
  created $adff cell `$procdff$847' with positive edge clock and positive level reset.
Creating register for signal `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.\bit_idx' using process `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.$proc$rtl/serializer.v:30$19'.
  created $adff cell `$procdff$852' with positive edge clock and positive level reset.
Creating register for signal `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.\shift_reg' using process `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.$proc$rtl/serializer.v:30$19'.
  created $adff cell `$procdff$857' with positive edge clock and positive level reset.
Creating register for signal `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.\transmitting' using process `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.$proc$rtl/serializer.v:30$19'.
  created $adff cell `$procdff$862' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\parallel_data' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:79$50'.
  created $adff cell `$procdff$867' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\data_valid' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:79$50'.
  created $adff cell `$procdff$872' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\serial_toggle_sync1' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:68$48'.
  created $adff cell `$procdff$877' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\serial_toggle_sync2' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:68$48'.
  created $adff cell `$procdff$882' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\serial_toggle' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:57$45'.
  created $adff cell `$procdff$887' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\word_buffer' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:57$45'.
  created $adff cell `$procdff$892' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\bit_idx' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:26$39'.
  created $adff cell `$procdff$897' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\shift_reg' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:26$39'.
  created $adff cell `$procdff$902' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\receiving' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:26$39'.
  created $adff cell `$procdff$907' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\serial_word_ready' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:26$39'.
  created $adff cell `$procdff$912' with positive edge clock and positive level reset.
Creating register for signal `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.\serial_word' using process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:26$39'.
  created $adff cell `$procdff$917' with positive edge clock and positive level reset.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\done' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $adff cell `$procdff$922' with positive edge clock and positive level reset.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\C_out' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $adff cell `$procdff$927' with positive edge clock and positive level reset.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\running' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $adff cell `$procdff$932' with positive edge clock and positive level reset.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\load_acc' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $adff cell `$procdff$937' with positive edge clock and positive level reset.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\cycle_cnt' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $adff cell `$procdff$942' with positive edge clock and positive level reset.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\rr' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$949' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\cc' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$956' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\s' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$963' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[0]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$970' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[1]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$977' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[2]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$984' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[3]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$991' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[4]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$998' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[5]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1005' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[6]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1012' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[7]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1019' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[8]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1026' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[9]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1033' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[10]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1040' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[11]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1047' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[12]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1054' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[13]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1061' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[14]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1068' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[15]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1075' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[16]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1082' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[17]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1089' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[18]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1096' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[19]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1103' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[20]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1110' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[21]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1117' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[22]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1124' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[23]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1131' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[24]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1138' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[25]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1145' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[26]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1152' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[27]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1159' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[28]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1166' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[29]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1173' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[30]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1180' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\A_shift[31]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1187' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[0]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1194' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[1]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1201' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[2]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1208' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[3]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1215' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[4]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1222' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[5]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1229' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[6]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1236' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[7]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1243' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[8]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1250' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[9]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1257' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[10]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1264' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[11]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1271' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[12]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1278' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[13]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1285' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[14]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1292' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[15]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1299' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[16]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1306' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[17]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1313' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[18]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1320' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[19]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1327' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[20]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1334' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[21]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1341' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[22]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1348' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[23]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1355' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[24]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1362' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[25]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1369' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[26]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1376' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[27]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1383' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[28]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1390' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[29]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1397' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[30]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1404' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\B_shift[31]' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $dff cell `$procdff$1411' with positive edge clock.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\load_shift_buffers$func$rtl/systolic4x4.v:107$141.i' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $adff cell `$procdff$1416' with positive edge clock and positive level reset.
Creating register for signal `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.\load_shift_buffers$func$rtl/systolic4x4.v:107$141.j' using process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
  created $adff cell `$procdff$1421' with positive edge clock and positive level reset.

22. Executing PROC_MEMWR pass (convert process memory writes to cells).

23. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:43$58'.
Removing empty process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:43$58'.
Found and cleaned up 1 empty switch in `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:35$55'.
Removing empty process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:35$55'.
Found and cleaned up 1 empty switch in `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:24$53'.
Removing empty process `$paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.$proc$rtl/pe_mac.v:24$53'.
Found and cleaned up 3 empty switches in `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.$proc$rtl/serializer.v:30$19'.
Removing empty process `$paramod\serializer\WIDTH=s32'00000000000000000000001000000000.$proc$rtl/serializer.v:30$19'.
Found and cleaned up 1 empty switch in `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:79$50'.
Removing empty process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:79$50'.
Removing empty process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:68$48'.
Found and cleaned up 1 empty switch in `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:57$45'.
Removing empty process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:57$45'.
Found and cleaned up 3 empty switches in `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:26$39'.
Removing empty process `$paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.$proc$rtl/deserializer.v:26$39'.
Removing empty process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:0$154'.
Found and cleaned up 3 empty switches in `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
Removing empty process `$paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.$proc$rtl/systolic4x4.v:99$142'.
Cleaned up 15 empty switches.

24. Executing CHECK pass (checking for obvious problems).
Checking module Systolic4x4_serial_io...
Checking module $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC...
Checking module $paramod\serializer\WIDTH=s32'00000000000000000000001000000000...
Checking module $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000...
Checking module $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4...
Found and reported 0 problems.

25. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.
Optimizing module $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.
<suppressed ~8 debug messages>
Optimizing module $paramod\serializer\WIDTH=s32'00000000000000000000001000000000.
<suppressed ~13 debug messages>
Optimizing module $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.
<suppressed ~22 debug messages>
Optimizing module $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.
<suppressed ~148 debug messages>

26. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod$fa674685d90c05290de176cbd2c717b5b455720d\PE_MAC.
Deleting now unused module $paramod\serializer\WIDTH=s32'00000000000000000000001000000000.
Deleting now unused module $paramod\deserializer\WIDTH=s32'00000000000000000000000010000000.
Deleting now unused module $paramod$d3d5788cdda5471de1680ab667385b769574627d\Systolic4x4.
<suppressed ~20 debug messages>

27. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 246 unused cells and 1088 unused wires.
<suppressed ~252 debug messages>

29. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

30. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Systolic4x4_serial_io..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\deser_A.$procmux$221: \deser_A.receiving -> 1'0
      Replacing known input bits on port A of cell $flatten\deser_A.$procmux$219: \deser_A.receiving -> 1'1
      Replacing known input bits on port A of cell $flatten\deser_B.$procmux$221: \deser_B.receiving -> 1'0
      Replacing known input bits on port A of cell $flatten\deser_B.$procmux$219: \deser_B.receiving -> 1'1
      Replacing known input bits on port A of cell $flatten\ser_C.$procmux$166: \ser_C.transmitting -> 1'1
      Replacing known input bits on port A of cell $flatten\ser_C.$procmux$169: \ser_C.transmitting -> 1'0
      Replacing known input bits on port A of cell $flatten\systolic_inst.$procmux$812: \systolic_inst.running -> 1'0
      Replacing known input bits on port A of cell $flatten\systolic_inst.$procmux$810: \systolic_inst.running -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~172 debug messages>

32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Systolic4x4_serial_io.
Performed a total of 0 changes.

33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

34. Executing OPT_DFF pass (perform DFF optimizations).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

36. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

37. Executing FSM pass (extract and optimize FSM).

37.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking Systolic4x4_serial_io.systolic_inst.A_shift[15] as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking Systolic4x4_serial_io.systolic_inst.A_shift[23] as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking Systolic4x4_serial_io.systolic_inst.A_shift[31] as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking Systolic4x4_serial_io.systolic_inst.A_shift[7] as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking Systolic4x4_serial_io.systolic_inst.B_shift[28] as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking Systolic4x4_serial_io.systolic_inst.B_shift[29] as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking Systolic4x4_serial_io.systolic_inst.B_shift[30] as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking Systolic4x4_serial_io.systolic_inst.B_shift[31] as FSM state register:
    Users of register don't seem to benefit from recoding.

37.2. Executing FSM_EXTRACT pass (extracting FSM from design).

37.3. Executing FSM_OPT pass (simple optimizations of FSMs).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

37.5. Executing FSM_OPT pass (simple optimizations of FSMs).

37.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

37.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

37.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

38. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

40. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Systolic4x4_serial_io..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~172 debug messages>

41. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Systolic4x4_serial_io.
Performed a total of 0 changes.

42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

43. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[2].col_loop[3].pe_i.B_reg, Q = \systolic_inst.row_loop[3].col_loop[3].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[3].col_loop[2].pe_i.A_reg, Q = \systolic_inst.row_loop[3].col_loop[3].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[3].col_loop[3].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[3].col_loop[3].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[2].col_loop[2].pe_i.B_reg, Q = \systolic_inst.row_loop[3].col_loop[2].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[3].col_loop[1].pe_i.A_reg, Q = \systolic_inst.row_loop[3].col_loop[2].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[3].col_loop[2].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[3].col_loop[2].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[2].col_loop[1].pe_i.B_reg, Q = \systolic_inst.row_loop[3].col_loop[1].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[3].col_loop[0].pe_i.A_reg, Q = \systolic_inst.row_loop[3].col_loop[1].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[3].col_loop[1].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[3].col_loop[1].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[2].col_loop[0].pe_i.B_reg, Q = \systolic_inst.row_loop[3].col_loop[0].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.A_shift[24], Q = \systolic_inst.row_loop[3].col_loop[0].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[3].col_loop[0].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[3].col_loop[0].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[1].col_loop[3].pe_i.B_reg, Q = \systolic_inst.row_loop[2].col_loop[3].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[2].col_loop[2].pe_i.A_reg, Q = \systolic_inst.row_loop[2].col_loop[3].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[2].col_loop[3].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[2].col_loop[3].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[1].col_loop[2].pe_i.B_reg, Q = \systolic_inst.row_loop[2].col_loop[2].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[2].col_loop[1].pe_i.A_reg, Q = \systolic_inst.row_loop[2].col_loop[2].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[2].col_loop[2].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[2].col_loop[2].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[1].col_loop[1].pe_i.B_reg, Q = \systolic_inst.row_loop[2].col_loop[1].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[2].col_loop[0].pe_i.A_reg, Q = \systolic_inst.row_loop[2].col_loop[1].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[2].col_loop[1].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[2].col_loop[1].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[1].col_loop[0].pe_i.B_reg, Q = \systolic_inst.row_loop[2].col_loop[0].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.A_shift[16], Q = \systolic_inst.row_loop[2].col_loop[0].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[2].col_loop[0].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[2].col_loop[0].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[0].col_loop[3].pe_i.B_reg, Q = \systolic_inst.row_loop[1].col_loop[3].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[1].col_loop[2].pe_i.A_reg, Q = \systolic_inst.row_loop[1].col_loop[3].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[1].col_loop[3].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[1].col_loop[3].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[0].col_loop[2].pe_i.B_reg, Q = \systolic_inst.row_loop[1].col_loop[2].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[1].col_loop[1].pe_i.A_reg, Q = \systolic_inst.row_loop[1].col_loop[2].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[1].col_loop[2].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[1].col_loop[2].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[0].col_loop[1].pe_i.B_reg, Q = \systolic_inst.row_loop[1].col_loop[1].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[1].col_loop[0].pe_i.A_reg, Q = \systolic_inst.row_loop[1].col_loop[1].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[1].col_loop[1].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[1].col_loop[1].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[0].col_loop[0].pe_i.B_reg, Q = \systolic_inst.row_loop[1].col_loop[0].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.A_shift[8], Q = \systolic_inst.row_loop[1].col_loop[0].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[1].col_loop[0].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[1].col_loop[0].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.B_shift[3], Q = \systolic_inst.row_loop[0].col_loop[3].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[0].col_loop[2].pe_i.A_reg, Q = \systolic_inst.row_loop[0].col_loop[3].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[0].col_loop[3].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[0].col_loop[3].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.B_shift[2], Q = \systolic_inst.row_loop[0].col_loop[2].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[0].col_loop[1].pe_i.A_reg, Q = \systolic_inst.row_loop[0].col_loop[2].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[0].col_loop[2].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[0].col_loop[2].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.B_shift[1], Q = \systolic_inst.row_loop[0].col_loop[1].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.row_loop[0].col_loop[0].pe_i.A_reg, Q = \systolic_inst.row_loop[0].col_loop[1].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[0].col_loop[1].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[0].col_loop[1].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$procdff$842 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.B_shift[0], Q = \systolic_inst.row_loop[0].col_loop[0].pe_i.B_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$procdff$837 ($adff) from module Systolic4x4_serial_io (D = \systolic_inst.A_shift[0], Q = \systolic_inst.row_loop[0].col_loop[0].pe_i.A_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$procdff$832 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57_Y, Q = \systolic_inst.row_loop[0].col_loop[0].pe_i.prod_reg).
Adding EN signal on $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$procdff$827 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$procmux$156_Y, Q = \systolic_inst.row_loop[0].col_loop[0].pe_i.acc_reg).
Adding EN signal on $flatten\systolic_inst.$procdff$998 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[4][7:0], Q = \systolic_inst.A_shift[4]).
Adding SRST signal on $auto$ff.cc:266:slice$1506 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$773_Y, Q = \systolic_inst.A_shift[4], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$991 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[3][7:0], Q = \systolic_inst.A_shift[3]).
Adding EN signal on $flatten\systolic_inst.$procdff$984 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[2][7:0], Q = \systolic_inst.A_shift[2]).
Adding EN signal on $flatten\systolic_inst.$procdff$977 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[1][7:0], Q = \systolic_inst.A_shift[1]).
Adding EN signal on $flatten\systolic_inst.$procdff$970 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[0][7:0], Q = \systolic_inst.A_shift[0]).
Adding EN signal on $flatten\systolic_inst.$procdff$942 ($adff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\cycle_cnt[31:0], Q = \systolic_inst.cycle_cnt).
Adding EN signal on $flatten\systolic_inst.$procdff$927 ($adff) from module Systolic4x4_serial_io (D = { \systolic_inst.row_loop[3].col_loop[3].pe_i.acc_reg \systolic_inst.row_loop[3].col_loop[2].pe_i.acc_reg \systolic_inst.row_loop[3].col_loop[1].pe_i.acc_reg \systolic_inst.row_loop[3].col_loop[0].pe_i.acc_reg \systolic_inst.row_loop[2].col_loop[3].pe_i.acc_reg \systolic_inst.row_loop[2].col_loop[2].pe_i.acc_reg \systolic_inst.row_loop[2].col_loop[1].pe_i.acc_reg \systolic_inst.row_loop[2].col_loop[0].pe_i.acc_reg \systolic_inst.row_loop[1].col_loop[3].pe_i.acc_reg \systolic_inst.row_loop[1].col_loop[2].pe_i.acc_reg \systolic_inst.row_loop[1].col_loop[1].pe_i.acc_reg \systolic_inst.row_loop[1].col_loop[0].pe_i.acc_reg \systolic_inst.row_loop[0].col_loop[3].pe_i.acc_reg \systolic_inst.row_loop[0].col_loop[2].pe_i.acc_reg \systolic_inst.row_loop[0].col_loop[1].pe_i.acc_reg \systolic_inst.row_loop[0].col_loop[0].pe_i.acc_reg }, Q = \systolic_inst.C_out).
Adding EN signal on $flatten\systolic_inst.$procdff$1411 ($dff) from module Systolic4x4_serial_io (D = 8'00000000, Q = \systolic_inst.B_shift[31]).
Adding EN signal on $flatten\systolic_inst.$procdff$1404 ($dff) from module Systolic4x4_serial_io (D = 8'00000000, Q = \systolic_inst.B_shift[30]).
Adding EN signal on $flatten\systolic_inst.$procdff$1397 ($dff) from module Systolic4x4_serial_io (D = 8'00000000, Q = \systolic_inst.B_shift[29]).
Adding EN signal on $flatten\systolic_inst.$procdff$1390 ($dff) from module Systolic4x4_serial_io (D = 8'00000000, Q = \systolic_inst.B_shift[28]).
Adding EN signal on $flatten\systolic_inst.$procdff$1383 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[27][7:0], Q = \systolic_inst.B_shift[27]).
Adding EN signal on $flatten\systolic_inst.$procdff$1376 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[26][7:0], Q = \systolic_inst.B_shift[26]).
Adding SRST signal on $auto$ff.cc:266:slice$1557 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$461_Y, Q = \systolic_inst.B_shift[26], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1369 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[25][7:0], Q = \systolic_inst.B_shift[25]).
Adding SRST signal on $auto$ff.cc:266:slice$1563 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$467_Y, Q = \systolic_inst.B_shift[25], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1362 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[24][7:0], Q = \systolic_inst.B_shift[24]).
Adding SRST signal on $auto$ff.cc:266:slice$1569 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$473_Y, Q = \systolic_inst.B_shift[24], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1355 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[23][7:0], Q = \systolic_inst.B_shift[23]).
Adding EN signal on $flatten\systolic_inst.$procdff$1348 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[22][7:0], Q = \systolic_inst.B_shift[22]).
Adding EN signal on $flatten\systolic_inst.$procdff$1341 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[21][7:0], Q = \systolic_inst.B_shift[21]).
Adding SRST signal on $auto$ff.cc:266:slice$1585 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$491_Y, Q = \systolic_inst.B_shift[21], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1334 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[20][7:0], Q = \systolic_inst.B_shift[20]).
Adding SRST signal on $auto$ff.cc:266:slice$1591 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$497_Y, Q = \systolic_inst.B_shift[20], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1327 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[19][7:0], Q = \systolic_inst.B_shift[19]).
Adding EN signal on $flatten\systolic_inst.$procdff$1320 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[18][7:0], Q = \systolic_inst.B_shift[18]).
Adding EN signal on $flatten\systolic_inst.$procdff$1313 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[17][7:0], Q = \systolic_inst.B_shift[17]).
Adding EN signal on $flatten\systolic_inst.$procdff$1306 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[16][7:0], Q = \systolic_inst.B_shift[16]).
Adding SRST signal on $auto$ff.cc:266:slice$1612 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$521_Y, Q = \systolic_inst.B_shift[16], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1299 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[15][7:0], Q = \systolic_inst.B_shift[15]).
Adding EN signal on $flatten\systolic_inst.$procdff$1292 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[14][7:0], Q = \systolic_inst.B_shift[14]).
Adding EN signal on $flatten\systolic_inst.$procdff$1285 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[13][7:0], Q = \systolic_inst.B_shift[13]).
Adding EN signal on $flatten\systolic_inst.$procdff$1278 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[12][7:0], Q = \systolic_inst.B_shift[12]).
Adding EN signal on $flatten\systolic_inst.$procdff$1271 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[11][7:0], Q = \systolic_inst.B_shift[11]).
Adding SRST signal on $auto$ff.cc:266:slice$1638 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$551_Y, Q = \systolic_inst.B_shift[11], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1264 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[10][7:0], Q = \systolic_inst.B_shift[10]).
Adding EN signal on $flatten\systolic_inst.$procdff$1257 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[9][7:0], Q = \systolic_inst.B_shift[9]).
Adding EN signal on $flatten\systolic_inst.$procdff$1250 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[8][7:0], Q = \systolic_inst.B_shift[8]).
Adding EN signal on $flatten\systolic_inst.$procdff$1243 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[7][7:0], Q = \systolic_inst.B_shift[7]).
Adding SRST signal on $auto$ff.cc:266:slice$1659 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$575_Y, Q = \systolic_inst.B_shift[7], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1236 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[6][7:0], Q = \systolic_inst.B_shift[6]).
Adding SRST signal on $auto$ff.cc:266:slice$1665 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$581_Y, Q = \systolic_inst.B_shift[6], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1229 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[5][7:0], Q = \systolic_inst.B_shift[5]).
Adding EN signal on $flatten\systolic_inst.$procdff$1222 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[4][7:0], Q = \systolic_inst.B_shift[4]).
Adding EN signal on $flatten\systolic_inst.$procdff$1215 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[3][7:0], Q = \systolic_inst.B_shift[3]).
Adding SRST signal on $auto$ff.cc:266:slice$1681 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$599_Y, Q = \systolic_inst.B_shift[3], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1208 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[2][7:0], Q = \systolic_inst.B_shift[2]).
Adding SRST signal on $auto$ff.cc:266:slice$1687 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$605_Y, Q = \systolic_inst.B_shift[2], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1201 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[1][7:0], Q = \systolic_inst.B_shift[1]).
Adding SRST signal on $auto$ff.cc:266:slice$1693 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$611_Y, Q = \systolic_inst.B_shift[1], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1194 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\B_shift[0][7:0], Q = \systolic_inst.B_shift[0]).
Adding EN signal on $flatten\systolic_inst.$procdff$1187 ($dff) from module Systolic4x4_serial_io (D = 8'00000000, Q = \systolic_inst.A_shift[31]).
Adding EN signal on $flatten\systolic_inst.$procdff$1180 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[30][7:0], Q = \systolic_inst.A_shift[30]).
Adding EN signal on $flatten\systolic_inst.$procdff$1173 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[29][7:0], Q = \systolic_inst.A_shift[29]).
Adding EN signal on $flatten\systolic_inst.$procdff$1166 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[28][7:0], Q = \systolic_inst.A_shift[28]).
Adding EN signal on $flatten\systolic_inst.$procdff$1159 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[27][7:0], Q = \systolic_inst.A_shift[27]).
Adding EN signal on $flatten\systolic_inst.$procdff$1152 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[26][7:0], Q = \systolic_inst.A_shift[26]).
Adding SRST signal on $auto$ff.cc:266:slice$1727 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$650_Y, Q = \systolic_inst.A_shift[26], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1145 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[25][7:0], Q = \systolic_inst.A_shift[25]).
Adding SRST signal on $auto$ff.cc:266:slice$1733 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$656_Y, Q = \systolic_inst.A_shift[25], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1138 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[24][7:0], Q = \systolic_inst.A_shift[24]).
Adding SRST signal on $auto$ff.cc:266:slice$1739 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$662_Y, Q = \systolic_inst.A_shift[24], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1131 ($dff) from module Systolic4x4_serial_io (D = 8'00000000, Q = \systolic_inst.A_shift[23]).
Adding EN signal on $flatten\systolic_inst.$procdff$1124 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[22][7:0], Q = \systolic_inst.A_shift[22]).
Adding SRST signal on $auto$ff.cc:266:slice$1748 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$671_Y, Q = \systolic_inst.A_shift[22], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1117 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[21][7:0], Q = \systolic_inst.A_shift[21]).
Adding EN signal on $flatten\systolic_inst.$procdff$1110 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[20][7:0], Q = \systolic_inst.A_shift[20]).
Adding EN signal on $flatten\systolic_inst.$procdff$1103 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[19][7:0], Q = \systolic_inst.A_shift[19]).
Adding EN signal on $flatten\systolic_inst.$procdff$1096 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[18][7:0], Q = \systolic_inst.A_shift[18]).
Adding EN signal on $flatten\systolic_inst.$procdff$1089 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[17][7:0], Q = \systolic_inst.A_shift[17]).
Adding SRST signal on $auto$ff.cc:266:slice$1774 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$701_Y, Q = \systolic_inst.A_shift[17], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1082 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[16][7:0], Q = \systolic_inst.A_shift[16]).
Adding SRST signal on $auto$ff.cc:266:slice$1780 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$707_Y, Q = \systolic_inst.A_shift[16], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1075 ($dff) from module Systolic4x4_serial_io (D = 8'00000000, Q = \systolic_inst.A_shift[15]).
Adding EN signal on $flatten\systolic_inst.$procdff$1068 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[14][7:0], Q = \systolic_inst.A_shift[14]).
Adding SRST signal on $auto$ff.cc:266:slice$1789 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$716_Y, Q = \systolic_inst.A_shift[14], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1061 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[13][7:0], Q = \systolic_inst.A_shift[13]).
Adding SRST signal on $auto$ff.cc:266:slice$1795 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$722_Y, Q = \systolic_inst.A_shift[13], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1054 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[12][7:0], Q = \systolic_inst.A_shift[12]).
Adding EN signal on $flatten\systolic_inst.$procdff$1047 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[11][7:0], Q = \systolic_inst.A_shift[11]).
Adding EN signal on $flatten\systolic_inst.$procdff$1040 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[10][7:0], Q = \systolic_inst.A_shift[10]).
Adding EN signal on $flatten\systolic_inst.$procdff$1033 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[9][7:0], Q = \systolic_inst.A_shift[9]).
Adding EN signal on $flatten\systolic_inst.$procdff$1026 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[8][7:0], Q = \systolic_inst.A_shift[8]).
Adding SRST signal on $auto$ff.cc:266:slice$1821 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$752_Y, Q = \systolic_inst.A_shift[8], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1019 ($dff) from module Systolic4x4_serial_io (D = 8'00000000, Q = \systolic_inst.A_shift[7]).
Adding EN signal on $flatten\systolic_inst.$procdff$1012 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[6][7:0], Q = \systolic_inst.A_shift[6]).
Adding SRST signal on $auto$ff.cc:266:slice$1830 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$761_Y, Q = \systolic_inst.A_shift[6], rval = 8'00000000).
Adding EN signal on $flatten\systolic_inst.$procdff$1005 ($dff) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$0\A_shift[5][7:0], Q = \systolic_inst.A_shift[5]).
Adding SRST signal on $auto$ff.cc:266:slice$1836 ($dffe) from module Systolic4x4_serial_io (D = $flatten\systolic_inst.$procmux$767_Y, Q = \systolic_inst.A_shift[5], rval = 8'00000000).
Adding EN signal on $flatten\ser_C.$procdff$857 ($adff) from module Systolic4x4_serial_io (D = $flatten\ser_C.$0\shift_reg[511:0], Q = \ser_C.shift_reg).
Adding EN signal on $flatten\ser_C.$procdff$852 ($adff) from module Systolic4x4_serial_io (D = $flatten\ser_C.$0\bit_idx[8:0], Q = \ser_C.bit_idx).
Adding EN signal on $flatten\ser_C.$procdff$847 ($adff) from module Systolic4x4_serial_io (D = \ser_C.shift_reg [0], Q = \ser_C.serial_data).
Adding EN signal on $flatten\deser_B.$procdff$917 ($adff) from module Systolic4x4_serial_io (D = \deser_B.shift_reg, Q = \deser_B.serial_word).
Adding EN signal on $flatten\deser_B.$procdff$902 ($adff) from module Systolic4x4_serial_io (D = { \B_in_serial_data \deser_B.shift_reg [127:2] }, Q = \deser_B.shift_reg [127:1]).
Adding EN signal on $flatten\deser_B.$procdff$902 ($adff) from module Systolic4x4_serial_io (D = $flatten\deser_B.$0\shift_reg[127:0] [0], Q = \deser_B.shift_reg [0]).
Adding EN signal on $flatten\deser_B.$procdff$897 ($adff) from module Systolic4x4_serial_io (D = $flatten\deser_B.$0\bit_idx[6:0], Q = \deser_B.bit_idx).
Adding EN signal on $flatten\deser_B.$procdff$892 ($adff) from module Systolic4x4_serial_io (D = \deser_B.serial_word, Q = \deser_B.word_buffer).
Adding EN signal on $flatten\deser_B.$procdff$887 ($adff) from module Systolic4x4_serial_io (D = $flatten\deser_B.$not$rtl/deserializer.v:62$47_Y, Q = \deser_B.serial_toggle).
Adding EN signal on $flatten\deser_B.$procdff$867 ($adff) from module Systolic4x4_serial_io (D = \deser_B.word_buffer, Q = \deser_B.parallel_data).
Adding EN signal on $flatten\deser_A.$procdff$917 ($adff) from module Systolic4x4_serial_io (D = \deser_A.shift_reg, Q = \deser_A.serial_word).
Adding EN signal on $flatten\deser_A.$procdff$902 ($adff) from module Systolic4x4_serial_io (D = { \A_in_serial_data \deser_A.shift_reg [127:2] }, Q = \deser_A.shift_reg [127:1]).
Adding EN signal on $flatten\deser_A.$procdff$902 ($adff) from module Systolic4x4_serial_io (D = $flatten\deser_A.$0\shift_reg[127:0] [0], Q = \deser_A.shift_reg [0]).
Adding EN signal on $flatten\deser_A.$procdff$897 ($adff) from module Systolic4x4_serial_io (D = $flatten\deser_A.$0\bit_idx[6:0], Q = \deser_A.bit_idx).
Adding EN signal on $flatten\deser_A.$procdff$892 ($adff) from module Systolic4x4_serial_io (D = \deser_A.serial_word, Q = \deser_A.word_buffer).
Adding EN signal on $flatten\deser_A.$procdff$887 ($adff) from module Systolic4x4_serial_io (D = $flatten\deser_A.$not$rtl/deserializer.v:62$47_Y, Q = \deser_A.serial_toggle).
Adding EN signal on $flatten\deser_A.$procdff$867 ($adff) from module Systolic4x4_serial_io (D = \deser_A.word_buffer, Q = \deser_A.parallel_data).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1827 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1827 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1827 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1827 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1827 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1827 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1827 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1827 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1786 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1786 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1786 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1786 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1786 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1786 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1786 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1786 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1745 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1745 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1745 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1745 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1745 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1745 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1745 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1745 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1704 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1704 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1704 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1704 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1704 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1704 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1704 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1704 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1549 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1549 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1549 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1549 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1549 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1549 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1549 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1549 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1546 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1546 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1546 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1546 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1546 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1546 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1546 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1546 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1543 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1543 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1543 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1543 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1543 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1543 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1543 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1543 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1540 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1540 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1540 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1540 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1540 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1540 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1540 ($dffe) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1540 ($dffe) from module Systolic4x4_serial_io.

44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 233 unused cells and 216 unused wires.
<suppressed ~234 debug messages>

45. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.
<suppressed ~63 debug messages>

46. Rerunning OPT passes. (Maybe there is more to doâ€¦)

47. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Systolic4x4_serial_io..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~89 debug messages>

48. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Systolic4x4_serial_io.
Performed a total of 0 changes.

49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
<suppressed ~423 debug messages>
Removed a total of 141 cells.

50. Executing OPT_DFF pass (perform DFF optimizations).

51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 0 unused cells and 132 unused wires.
<suppressed ~1 debug messages>

52. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

53. Rerunning OPT passes. (Maybe there is more to doâ€¦)

54. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Systolic4x4_serial_io..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~81 debug messages>

55. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Systolic4x4_serial_io.
Performed a total of 0 changes.

56. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

57. Executing OPT_DFF pass (perform DFF optimizations).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

59. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

60. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell Systolic4x4_serial_io.$flatten\deser_A.$add$rtl/deserializer.v:42$43 ($add).
Removed top 25 bits (of 32) from port Y of cell Systolic4x4_serial_io.$flatten\deser_A.$add$rtl/deserializer.v:42$43 ($add).
Removed top 31 bits (of 32) from port B of cell Systolic4x4_serial_io.$flatten\deser_B.$add$rtl/deserializer.v:42$43 ($add).
Removed top 25 bits (of 32) from port Y of cell Systolic4x4_serial_io.$flatten\deser_B.$add$rtl/deserializer.v:42$43 ($add).
Removed top 28 bits (of 32) from port B of cell Systolic4x4_serial_io.$flatten\systolic_inst.$ge$rtl/systolic4x4.v:128$153 ($ge).
Removed top 31 bits (of 32) from port B of cell Systolic4x4_serial_io.$flatten\systolic_inst.$add$rtl/systolic4x4.v:125$152 ($add).
Removed top 31 bits (of 32) from port B of cell Systolic4x4_serial_io.$flatten\ser_C.$add$rtl/serializer.v:48$23 ($add).
Removed top 23 bits (of 32) from port Y of cell Systolic4x4_serial_io.$flatten\ser_C.$add$rtl/serializer.v:48$23 ($add).
Removed top 127 bits (of 128) from wire Systolic4x4_serial_io.$flatten\deser_A.$0\shift_reg[127:0].
Removed top 25 bits (of 32) from wire Systolic4x4_serial_io.$flatten\deser_A.$add$rtl/deserializer.v:42$43_Y.
Removed top 127 bits (of 128) from wire Systolic4x4_serial_io.$flatten\deser_B.$0\shift_reg[127:0].
Removed top 25 bits (of 32) from wire Systolic4x4_serial_io.$flatten\deser_B.$add$rtl/deserializer.v:42$43_Y.
Removed top 23 bits (of 32) from wire Systolic4x4_serial_io.$flatten\ser_C.$add$rtl/serializer.v:48$23_Y.
Removed top 197 bits (of 512) from wire Systolic4x4_serial_io.$flatten\ser_C.$procmux$174_Y.
Removed top 72 bits (of 512) from wire Systolic4x4_serial_io.C_out.

61. Executing PEEPOPT pass (run peephole optimizers).

62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

63. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Systolic4x4_serial_io:
  creating $macc model for $flatten\deser_A.$add$rtl/deserializer.v:42$43 ($add).
  creating $macc model for $flatten\deser_B.$add$rtl/deserializer.v:42$43 ($add).
  creating $macc model for $flatten\ser_C.$add$rtl/serializer.v:48$23 ($add).
  creating $macc model for $flatten\systolic_inst.$add$rtl/systolic4x4.v:125$152 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $macc model for $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60 ($add).
  creating $macc model for $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57 ($mul).
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60.
  creating $alu model for $macc $flatten\systolic_inst.$add$rtl/systolic4x4.v:125$152.
  creating $alu model for $macc $flatten\ser_C.$add$rtl/serializer.v:48$23.
  creating $alu model for $macc $flatten\deser_B.$add$rtl/deserializer.v:42$43.
  creating $alu model for $macc $flatten\deser_A.$add$rtl/deserializer.v:42$43.
  creating $macc cell for $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1894
  creating $macc cell for $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1895
  creating $macc cell for $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1896
  creating $macc cell for $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1897
  creating $macc cell for $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1898
  creating $macc cell for $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1899
  creating $macc cell for $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1900
  creating $macc cell for $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1901
  creating $macc cell for $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1902
  creating $macc cell for $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1903
  creating $macc cell for $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1904
  creating $macc cell for $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1905
  creating $macc cell for $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1906
  creating $macc cell for $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1907
  creating $macc cell for $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1908
  creating $macc cell for $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$mul$rtl/pe_mac.v:39$57: $auto$alumacc.cc:365:replace_macc$1909
  creating $alu model for $flatten\systolic_inst.$ge$rtl/systolic4x4.v:128$153 ($ge): new $alu
  creating $alu cell for $flatten\systolic_inst.$ge$rtl/systolic4x4.v:128$153: $auto$alumacc.cc:485:replace_alu$1911
  creating $alu cell for $flatten\deser_A.$add$rtl/deserializer.v:42$43: $auto$alumacc.cc:485:replace_alu$1920
  creating $alu cell for $flatten\deser_B.$add$rtl/deserializer.v:42$43: $auto$alumacc.cc:485:replace_alu$1923
  creating $alu cell for $flatten\ser_C.$add$rtl/serializer.v:48$23: $auto$alumacc.cc:485:replace_alu$1926
  creating $alu cell for $flatten\systolic_inst.$add$rtl/systolic4x4.v:125$152: $auto$alumacc.cc:485:replace_alu$1929
  creating $alu cell for $flatten\systolic_inst.\row_loop[0].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1932
  creating $alu cell for $flatten\systolic_inst.\row_loop[0].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1935
  creating $alu cell for $flatten\systolic_inst.\row_loop[0].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1938
  creating $alu cell for $flatten\systolic_inst.\row_loop[0].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1941
  creating $alu cell for $flatten\systolic_inst.\row_loop[1].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1944
  creating $alu cell for $flatten\systolic_inst.\row_loop[1].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1947
  creating $alu cell for $flatten\systolic_inst.\row_loop[1].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1950
  creating $alu cell for $flatten\systolic_inst.\row_loop[1].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1953
  creating $alu cell for $flatten\systolic_inst.\row_loop[2].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1956
  creating $alu cell for $flatten\systolic_inst.\row_loop[2].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1959
  creating $alu cell for $flatten\systolic_inst.\row_loop[2].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1962
  creating $alu cell for $flatten\systolic_inst.\row_loop[2].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1965
  creating $alu cell for $flatten\systolic_inst.\row_loop[3].col_loop[0].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1968
  creating $alu cell for $flatten\systolic_inst.\row_loop[3].col_loop[1].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1971
  creating $alu cell for $flatten\systolic_inst.\row_loop[3].col_loop[2].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1974
  creating $alu cell for $flatten\systolic_inst.\row_loop[3].col_loop[3].pe_i.$add$rtl/pe_mac.v:51$60: $auto$alumacc.cc:485:replace_alu$1977
  created 21 $alu and 16 $macc cells.

64. Executing SHARE pass (SAT-based resource sharing).

65. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

67. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Systolic4x4_serial_io..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~81 debug messages>

68. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Systolic4x4_serial_io.
Performed a total of 0 changes.

69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

70. Executing OPT_DFF pass (perform DFF optimizations).

71. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

72. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

73. Rerunning OPT passes. (Maybe there is more to doâ€¦)

74. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Systolic4x4_serial_io..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~81 debug messages>

75. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Systolic4x4_serial_io.
Performed a total of 0 changes.

76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

77. Executing OPT_DFF pass (perform DFF optimizations).

78. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

79. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

80. Executing MEMORY pass.

80.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

80.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

80.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

80.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

80.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

80.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

80.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

80.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

80.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

80.10. Executing MEMORY_COLLECT pass (generating $mem cells).

81. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

82. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.
<suppressed ~67 debug messages>

83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

84. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1707 ($dffe) from module Systolic4x4_serial_io (D = \deser_A.parallel_data [127:120], Q = \systolic_inst.A_shift[30], rval = 8'00000000).
Adding SRST signal on $auto$ff.cc:266:slice$1552 ($dffe) from module Systolic4x4_serial_io (D = \deser_B.parallel_data [127:120], Q = \systolic_inst.B_shift[27], rval = 8'00000000).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1835 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1835 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1835 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1835 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1835 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1835 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1835 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1835 ($sdffce) from module Systolic4x4_serial_io.

85. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 2 unused cells and 56 unused wires.
<suppressed ~3 debug messages>

86. Rerunning OPT passes (Removed registers in this run.)

87. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

88. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

89. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1754 ($dffe) from module Systolic4x4_serial_io (D = \deser_A.parallel_data [95:88], Q = \systolic_inst.A_shift[21], rval = 8'00000000).
Adding SRST signal on $auto$ff.cc:266:slice$1580 ($dffe) from module Systolic4x4_serial_io (D = \deser_B.parallel_data [119:112], Q = \systolic_inst.B_shift[22], rval = 8'00000000).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1841 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1841 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1841 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1841 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1841 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1841 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1841 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1841 ($sdffce) from module Systolic4x4_serial_io.

90. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

91. Rerunning OPT passes (Removed registers in this run.)

92. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

94. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1801 ($dffe) from module Systolic4x4_serial_io (D = \deser_A.parallel_data [63:56], Q = \systolic_inst.A_shift[12], rval = 8'00000000).
Adding SRST signal on $auto$ff.cc:266:slice$1607 ($dffe) from module Systolic4x4_serial_io (D = \deser_B.parallel_data [111:104], Q = \systolic_inst.B_shift[17], rval = 8'00000000).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$1511 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$1511 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$1511 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$1511 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$1511 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$1511 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$1511 ($sdffce) from module Systolic4x4_serial_io.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$1511 ($sdffce) from module Systolic4x4_serial_io.

95. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

96. Rerunning OPT passes (Removed registers in this run.)

97. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

98. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

99. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1633 ($dffe) from module Systolic4x4_serial_io (D = \deser_B.parallel_data [103:96], Q = \systolic_inst.B_shift[12], rval = 8'00000000).
Adding SRST signal on $auto$ff.cc:266:slice$1512 ($dffe) from module Systolic4x4_serial_io (D = \deser_A.parallel_data [31:24], Q = \systolic_inst.A_shift[3], rval = 8'00000000).

100. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

101. Rerunning OPT passes (Removed registers in this run.)

102. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

104. Executing OPT_DFF pass (perform DFF optimizations).

105. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

106. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

107. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

108. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

109. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Systolic4x4_serial_io..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~51 debug messages>

110. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Systolic4x4_serial_io.
Performed a total of 0 changes.

111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

112. Executing OPT_SHARE pass.

113. Executing OPT_DFF pass (perform DFF optimizations).

114. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

115. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

116. Executing TECHMAP pass (map to technology primitives).

116.1. Executing Verilog-2005 frontend: /nix/store/9r0bh7sp051dpm8km8bqlb028anpd3v3-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/9r0bh7sp051dpm8km8bqlb028anpd3v3-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

116.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$a7817265ef3ab2ee43da53bbd8a90f6450d412d9\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$53700bbee849b2010ad0b60a61ccd204a10e24ca\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper maccmap for cells of type $macc.
  add \systolic_inst.row_loop[1].col_loop[1].pe_i.A_reg * \systolic_inst.row_loop[1].col_loop[1].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[2].col_loop[2].pe_i.A_reg * \systolic_inst.row_loop[2].col_loop[2].pe_i.B_reg (8x8 bits, signed)
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
  add \systolic_inst.row_loop[1].col_loop[2].pe_i.A_reg * \systolic_inst.row_loop[1].col_loop[2].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[0].col_loop[1].pe_i.A_reg * \systolic_inst.row_loop[0].col_loop[1].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[0].col_loop[3].pe_i.A_reg * \systolic_inst.row_loop[0].col_loop[3].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[3].col_loop[3].pe_i.A_reg * \systolic_inst.row_loop[3].col_loop[3].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[1].col_loop[0].pe_i.A_reg * \systolic_inst.row_loop[1].col_loop[0].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[0].col_loop[0].pe_i.A_reg * \systolic_inst.row_loop[0].col_loop[0].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[0].col_loop[2].pe_i.A_reg * \systolic_inst.row_loop[0].col_loop[2].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[3].col_loop[2].pe_i.A_reg * \systolic_inst.row_loop[3].col_loop[2].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[2].col_loop[1].pe_i.A_reg * \systolic_inst.row_loop[2].col_loop[1].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[2].col_loop[3].pe_i.A_reg * \systolic_inst.row_loop[2].col_loop[3].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[1].col_loop[3].pe_i.A_reg * \systolic_inst.row_loop[1].col_loop[3].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[3].col_loop[0].pe_i.A_reg * \systolic_inst.row_loop[3].col_loop[0].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[2].col_loop[0].pe_i.A_reg * \systolic_inst.row_loop[2].col_loop[0].pe_i.B_reg (8x8 bits, signed)
  add \systolic_inst.row_loop[3].col_loop[1].pe_i.A_reg * \systolic_inst.row_loop[3].col_loop[1].pe_i.B_reg (8x8 bits, signed)
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
No more expansions possible.
<suppressed ~5751 debug messages>

117. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.
<suppressed ~5230 debug messages>

118. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
<suppressed ~5304 debug messages>
Removed a total of 1768 cells.

119. Executing OPT_DFF pass (perform DFF optimizations).

120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 1136 unused cells and 2895 unused wires.
<suppressed ~1137 debug messages>

121. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

122. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

123. Executing OPT_DFF pass (perform DFF optimizations).

124. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

125. Executing ABC pass (technology mapping using ABC).

125.1. Extracting gate netlist of module `\Systolic4x4_serial_io' to `<abc-temp-dir>/input.blif'..
Extracted 12425 gates and 14934 wires to a netlist network with 2508 inputs and 1551 outputs.

125.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

125.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:      428
ABC RESULTS:             ORNOT cells:      473
ABC RESULTS:              XNOR cells:      920
ABC RESULTS:              NAND cells:      945
ABC RESULTS:               AND cells:      676
ABC RESULTS:                OR cells:     1605
ABC RESULTS:               NOR cells:      712
ABC RESULTS:               XOR cells:     2636
ABC RESULTS:               MUX cells:      724
ABC RESULTS:            ANDNOT cells:     3516
ABC RESULTS:        internal signals:    10875
ABC RESULTS:           input signals:     2508
ABC RESULTS:          output signals:     1551
Removing temp directory.

126. Executing OPT pass (performing simple optimizations).

126.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.
<suppressed ~34 debug messages>

126.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

126.3. Executing OPT_DFF pass (perform DFF optimizations).

126.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 1 unused cells and 5631 unused wires.
<suppressed ~7 debug messages>

126.5. Finished fast OPT passes.

127. Executing HIERARCHY pass (managing design hierarchy).

127.1. Analyzing design hierarchy..
Top module:  \Systolic4x4_serial_io

127.2. Analyzing design hierarchy..
Top module:  \Systolic4x4_serial_io
Removed 0 unused modules.

128. Executing CHECK pass (checking for obvious problems).
Checking module Systolic4x4_serial_io...
Found and reported 0 problems.

129. Printing statistics.

=== Systolic4x4_serial_io ===

   Number of wires:              12891
   Number of wire bits:          21144
   Number of public wires:         423
   Number of public wire bits:    7266
   Number of ports:                 13
   Number of port bits:             13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16146
     $_ANDNOT_                    3513
     $_AND_                        675
     $_DFFE_PN0N_                   32
     $_DFFE_PN0P_                 3098
     $_DFFE_PP_                    192
     $_DFF_PN0_                     14
     $_MUX_                        724
     $_NAND_                       945
     $_NOR_                        712
     $_NOT_                        427
     $_ORNOT_                      473
     $_OR_                        1605
     $_SDFFCE_PN0P_                 64
     $_SDFFCE_PP0P_                 96
     $_XNOR_                       920
     $_XOR_                       2636
     $scopeinfo                     20

130. Generating Graphviz representation of design.
Writing dot description to `/home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/06-yosys-synthesis/primitive_techmap.dot'.
Dumping module Systolic4x4_serial_io to page 1.

131. Executing OPT pass (performing simple optimizations).

131.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

131.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

131.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Systolic4x4_serial_io..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

131.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Systolic4x4_serial_io.
Performed a total of 0 changes.

131.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Systolic4x4_serial_io'.
Removed a total of 0 cells.

131.6. Executing OPT_DFF pass (perform DFF optimizations).

131.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..

131.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Systolic4x4_serial_io.

131.9. Finished OPT passes. (There is nothing left to do.)

132. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 20 unused cells and 273 unused wires.
<suppressed ~293 debug messages>
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/tmp/fbf393b4130b4115848adf43e9ef3407.lib ",
   "modules": {
      "\\Systolic4x4_serial_io": {
         "num_wires":         12618,
         "num_wire_bits":     17824,
         "num_pub_wires":     150,
         "num_pub_wire_bits": 3946,
         "num_ports":         13,
         "num_port_bits":     13,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         16126,
         "num_cells_by_type": {
            "$_ANDNOT_": 3513,
            "$_AND_": 675,
            "$_DFFE_PN0N_": 32,
            "$_DFFE_PN0P_": 3098,
            "$_DFFE_PP_": 192,
            "$_DFF_PN0_": 14,
            "$_MUX_": 724,
            "$_NAND_": 945,
            "$_NOR_": 712,
            "$_NOT_": 427,
            "$_ORNOT_": 473,
            "$_OR_": 1605,
            "$_SDFFCE_PN0P_": 64,
            "$_SDFFCE_PP0P_": 96,
            "$_XNOR_": 920,
            "$_XOR_": 2636
         }
      }
   },
      "design": {
         "num_wires":         12618,
         "num_wire_bits":     17824,
         "num_pub_wires":     150,
         "num_pub_wire_bits": 3946,
         "num_ports":         13,
         "num_port_bits":     13,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         16126,
         "num_cells_by_type": {
            "$_ANDNOT_": 3513,
            "$_AND_": 675,
            "$_DFFE_PN0N_": 32,
            "$_DFFE_PN0P_": 3098,
            "$_DFFE_PP_": 192,
            "$_DFF_PN0_": 14,
            "$_MUX_": 724,
            "$_NAND_": 945,
            "$_NOR_": 712,
            "$_NOT_": 427,
            "$_ORNOT_": 473,
            "$_OR_": 1605,
            "$_SDFFCE_PN0P_": 64,
            "$_SDFFCE_PP0P_": 96,
            "$_XNOR_": 920,
            "$_XOR_": 2636
         }
      }
}

133. Printing statistics.

=== Systolic4x4_serial_io ===

   Number of wires:              12618
   Number of wire bits:          17824
   Number of public wires:         150
   Number of public wire bits:    3946
   Number of ports:                 13
   Number of port bits:             13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16126
     $_ANDNOT_                    3513
     $_AND_                        675
     $_DFFE_PN0N_                   32
     $_DFFE_PN0P_                 3098
     $_DFFE_PP_                    192
     $_DFF_PN0_                     14
     $_MUX_                        724
     $_NAND_                       945
     $_NOR_                        712
     $_NOT_                        427
     $_ORNOT_                      473
     $_OR_                        1605
     $_SDFFCE_PN0P_                 64
     $_SDFFCE_PP0P_                 96
     $_XNOR_                       920
     $_XOR_                       2636

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!
   Area for cell type $_DFFE_PP_ is unknown!
   Area for cell type $_DFF_PN0_ is unknown!
   Area for cell type $_DFFE_PN0N_ is unknown!
   Area for cell type $_DFFE_PN0P_ is unknown!
   Area for cell type $_SDFFCE_PN0P_ is unknown!
   Area for cell type $_SDFFCE_PP0P_ is unknown!

[INFO] Applying tri-state buffer mapping from '/home/hp/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

134. Executing TECHMAP pass (map to technology primitives).

134.1. Executing Verilog-2005 frontend: /home/hp/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/hp/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

134.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

135. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/hp/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

136. Executing TECHMAP pass (map to technology primitives).

136.1. Executing Verilog-2005 frontend: /home/hp/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/hp/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

136.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

137. Executing SIMPLEMAP pass (map simple cells to gate primitives).

138. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

138.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\Systolic4x4_serial_io':
  mapped 3144 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 352 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/tmp/fbf393b4130b4115848adf43e9ef3407.lib ",
   "modules": {
      "\\Systolic4x4_serial_io": {
         "num_wires":         16260,
         "num_wire_bits":     21466,
         "num_pub_wires":     150,
         "num_pub_wire_bits": 3946,
         "num_ports":         13,
         "num_port_bits":     13,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         19768,
         "area":              90096.409600,
         "num_cells_by_type": {
            "$_ANDNOT_": 3513,
            "$_AND_": 675,
            "$_MUX_": 4366,
            "$_NAND_": 945,
            "$_NOR_": 712,
            "$_NOT_": 427,
            "$_ORNOT_": 473,
            "$_OR_": 1605,
            "$_XNOR_": 920,
            "$_XOR_": 2636,
            "sky130_fd_sc_hd__dfrtp_2": 3144,
            "sky130_fd_sc_hd__dfxtp_2": 352
         }
      }
   },
      "design": {
         "num_wires":         16260,
         "num_wire_bits":     21466,
         "num_pub_wires":     150,
         "num_pub_wire_bits": 3946,
         "num_ports":         13,
         "num_port_bits":     13,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         19768,
         "area":              90096.409600,
         "num_cells_by_type": {
            "$_ANDNOT_": 3513,
            "$_AND_": 675,
            "$_MUX_": 4366,
            "$_NAND_": 945,
            "$_NOR_": 712,
            "$_NOT_": 427,
            "$_ORNOT_": 473,
            "$_OR_": 1605,
            "$_XNOR_": 920,
            "$_XOR_": 2636,
            "sky130_fd_sc_hd__dfrtp_2": 3144,
            "sky130_fd_sc_hd__dfxtp_2": 352
         }
      }
}

139. Printing statistics.

=== Systolic4x4_serial_io ===

   Number of wires:              16260
   Number of wire bits:          21466
   Number of public wires:         150
   Number of public wire bits:    3946
   Number of ports:                 13
   Number of port bits:             13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              19768
     $_ANDNOT_                    3513
     $_AND_                        675
     $_MUX_                       4366
     $_NAND_                       945
     $_NOR_                        712
     $_NOT_                        427
     $_ORNOT_                      473
     $_OR_                        1605
     $_XNOR_                       920
     $_XOR_                       2636
     sky130_fd_sc_hd__dfrtp_2     3144
     sky130_fd_sc_hd__dfxtp_2      352

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!

   Chip area for module '\Systolic4x4_serial_io': 90096.409600
     of which used for sequential elements: 90096.409600 (100.00%)

[INFO] Using generated ABC script '/home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/06-yosys-synthesis/AREA_0.abc'â€¦

140. Executing ABC pass (technology mapping using ABC).

140.1. Extracting gate netlist of module `\Systolic4x4_serial_io' to `/tmp/yosys-abc-cBqKqW/input.blif'..
Extracted 16272 gates and 19775 wires to a netlist network with 3502 inputs and 3492 outputs.

140.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-cBqKqW/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-cBqKqW/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-cBqKqW/input.blif 
ABC: + read_lib -w /home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/tmp/fbf393b4130b4115848adf43e9ef3407.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/tmp/fbf393b4130b4115848adf43e9ef3407.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.07 sec
ABC: Memory =    9.54 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/06-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/06-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =  13101 (  2.2 %)   Cap = 14.0 ff (  5.6 %)   Area =   128767.25 ( 78.4 %)   Delay = 30565.25 ps  (  4.0 %)               
ABC: Path  0 --     189 : 0    3 pi                       A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =   5.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    7032 : 4    1 sky130_fd_sc_hd__or4_2   A =   8.76  Df = 629.6 -548.3 ps  S =  91.6 ps  Cin =  1.5 ff  Cout =   1.6 ff  Cmax = 310.4 ff  G =  103  
ABC: Path  2 --    7036 : 3    1 sky130_fd_sc_hd__or3_2   A =   7.51  Df =1095.7 -927.0 ps  S =  68.7 ps  Cin =  1.5 ff  Cout =   1.5 ff  Cmax = 310.4 ff  G =   92  
ABC: Path  3 --    7037 : 2    1 sky130_fd_sc_hd__or2_2   A =   6.26  Df =1378.0-1116.1 ps  S =  59.5 ps  Cin =  1.5 ff  Cout =   4.7 ff  Cmax = 299.4 ff  G =  297  
ABC: Path  4 --    7038 : 4  513 sky130_fd_sc_hd__o31ai_2 A =  12.51  Df =23825.4-18664.2 ps  S =30256.3 ps  Cin =  4.4 ff  Cout =1806.9 ff  Cmax =  80.6 ff  G =39820  
ABC: Path  5 --   19418 : 3    1 sky130_fd_sc_hd__mux2_1  A =  11.26  Df =30565.2-22860.1 ps  S = 390.6 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 173.0 ff  G = 1465  
ABC: Start-point = pi188 (\systolic_inst.cycle_cnt [15]).  End-point = po2826 ($auto$rtlil.cc:2739:MuxGate$45812).
ABC: netlist                       : i/o = 3502/ 3492  lat =    0  nd = 13101  edge =  36828  area =128787.11  delay =18.00  lev = 18
ABC: + write_blif /tmp/yosys-abc-cBqKqW/output.blif 

140.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:       72
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       78
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:      162
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       98
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:      270
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:       44
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:      146
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:       82
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:      126
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:      203
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:      456
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:      252
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       51
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:     1065
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:      513
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      666
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:      126
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:      219
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:      194
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:      276
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:      250
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      339
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:     1156
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      287
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:      396
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:      137
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:      949
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:      199
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:      318
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:     2273
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      706
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:      118
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:      525
ABC RESULTS:        internal signals:    12781
ABC RESULTS:           input signals:     3502
ABC RESULTS:          output signals:     3492
Removing temp directory.

141. Executing SETUNDEF pass (replace undef values with defined constants).

142. Executing HILOMAP pass (mapping to constant drivers).

143. Executing SPLITNETS pass (splitting up multi-bit signals).

144. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Systolic4x4_serial_io..
Removed 0 unused cells and 21462 unused wires.
<suppressed ~441 debug messages>

145. Executing INSBUF pass (insert buffer cells for connected wires).
Add Systolic4x4_serial_io/$auto$insbuf.cc:97:execute$60261: \clk -> \C_out_serial_clk

146. Executing CHECK pass (checking for obvious problems).
Checking module Systolic4x4_serial_io...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/hp/openlane2/project2/runs/RUN_2025-09-26_17-01-24/tmp/fbf393b4130b4115848adf43e9ef3407.lib ",
   "modules": {
      "\\Systolic4x4_serial_io": {
         "num_wires":         16607,
         "num_wire_bits":     16607,
         "num_pub_wires":     3506,
         "num_pub_wire_bits": 3506,
         "num_ports":         13,
         "num_port_bits":     13,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         16598,
         "area":              218868.662400,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 2,
            "sky130_fd_sc_hd__a211o_2": 126,
            "sky130_fd_sc_hd__a211oi_2": 27,
            "sky130_fd_sc_hd__a21bo_2": 203,
            "sky130_fd_sc_hd__a21boi_2": 24,
            "sky130_fd_sc_hd__a21o_2": 339,
            "sky130_fd_sc_hd__a21oi_2": 396,
            "sky130_fd_sc_hd__a221o_2": 513,
            "sky130_fd_sc_hd__a221oi_2": 4,
            "sky130_fd_sc_hd__a22o_2": 525,
            "sky130_fd_sc_hd__a22oi_2": 137,
            "sky130_fd_sc_hd__a2bb2o_2": 118,
            "sky130_fd_sc_hd__a311o_2": 2,
            "sky130_fd_sc_hd__a311oi_2": 19,
            "sky130_fd_sc_hd__a31o_2": 219,
            "sky130_fd_sc_hd__a31oi_2": 24,
            "sky130_fd_sc_hd__a32o_2": 276,
            "sky130_fd_sc_hd__a41o_2": 2,
            "sky130_fd_sc_hd__and2_2": 949,
            "sky130_fd_sc_hd__and2b_2": 250,
            "sky130_fd_sc_hd__and3_2": 318,
            "sky130_fd_sc_hd__and3b_2": 23,
            "sky130_fd_sc_hd__and4_2": 194,
            "sky130_fd_sc_hd__and4b_2": 72,
            "sky130_fd_sc_hd__and4bb_2": 5,
            "sky130_fd_sc_hd__buf_2": 1,
            "sky130_fd_sc_hd__dfrtp_2": 3144,
            "sky130_fd_sc_hd__dfxtp_2": 352,
            "sky130_fd_sc_hd__inv_2": 287,
            "sky130_fd_sc_hd__mux2_1": 2273,
            "sky130_fd_sc_hd__nand2_2": 1156,
            "sky130_fd_sc_hd__nand2b_2": 270,
            "sky130_fd_sc_hd__nand3_2": 162,
            "sky130_fd_sc_hd__nand3b_2": 3,
            "sky130_fd_sc_hd__nand4_2": 82,
            "sky130_fd_sc_hd__nor2_2": 706,
            "sky130_fd_sc_hd__nor3_2": 33,
            "sky130_fd_sc_hd__nor3b_2": 2,
            "sky130_fd_sc_hd__nor4_2": 3,
            "sky130_fd_sc_hd__nor4b_2": 1,
            "sky130_fd_sc_hd__o211a_2": 78,
            "sky130_fd_sc_hd__o211ai_2": 44,
            "sky130_fd_sc_hd__o21a_2": 252,
            "sky130_fd_sc_hd__o21ai_2": 199,
            "sky130_fd_sc_hd__o21ba_2": 146,
            "sky130_fd_sc_hd__o21bai_2": 30,
            "sky130_fd_sc_hd__o221a_2": 2,
            "sky130_fd_sc_hd__o22a_2": 8,
            "sky130_fd_sc_hd__o22ai_2": 1,
            "sky130_fd_sc_hd__o2bb2a_2": 98,
            "sky130_fd_sc_hd__o311a_2": 23,
            "sky130_fd_sc_hd__o311ai_2": 1,
            "sky130_fd_sc_hd__o31a_2": 51,
            "sky130_fd_sc_hd__o31ai_2": 15,
            "sky130_fd_sc_hd__o32a_2": 6,
            "sky130_fd_sc_hd__o41a_2": 30,
            "sky130_fd_sc_hd__or2_2": 666,
            "sky130_fd_sc_hd__or3_2": 126,
            "sky130_fd_sc_hd__or3b_2": 30,
            "sky130_fd_sc_hd__or4_2": 25,
            "sky130_fd_sc_hd__or4b_2": 4,
            "sky130_fd_sc_hd__xnor2_2": 1065,
            "sky130_fd_sc_hd__xor2_2": 456
         }
      }
   },
      "design": {
         "num_wires":         16607,
         "num_wire_bits":     16607,
         "num_pub_wires":     3506,
         "num_pub_wire_bits": 3506,
         "num_ports":         13,
         "num_port_bits":     13,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         16598,
         "area":              218868.662400,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 2,
            "sky130_fd_sc_hd__a211o_2": 126,
            "sky130_fd_sc_hd__a211oi_2": 27,
            "sky130_fd_sc_hd__a21bo_2": 203,
            "sky130_fd_sc_hd__a21boi_2": 24,
            "sky130_fd_sc_hd__a21o_2": 339,
            "sky130_fd_sc_hd__a21oi_2": 396,
            "sky130_fd_sc_hd__a221o_2": 513,
            "sky130_fd_sc_hd__a221oi_2": 4,
            "sky130_fd_sc_hd__a22o_2": 525,
            "sky130_fd_sc_hd__a22oi_2": 137,
            "sky130_fd_sc_hd__a2bb2o_2": 118,
            "sky130_fd_sc_hd__a311o_2": 2,
            "sky130_fd_sc_hd__a311oi_2": 19,
            "sky130_fd_sc_hd__a31o_2": 219,
            "sky130_fd_sc_hd__a31oi_2": 24,
            "sky130_fd_sc_hd__a32o_2": 276,
            "sky130_fd_sc_hd__a41o_2": 2,
            "sky130_fd_sc_hd__and2_2": 949,
            "sky130_fd_sc_hd__and2b_2": 250,
            "sky130_fd_sc_hd__and3_2": 318,
            "sky130_fd_sc_hd__and3b_2": 23,
            "sky130_fd_sc_hd__and4_2": 194,
            "sky130_fd_sc_hd__and4b_2": 72,
            "sky130_fd_sc_hd__and4bb_2": 5,
            "sky130_fd_sc_hd__buf_2": 1,
            "sky130_fd_sc_hd__dfrtp_2": 3144,
            "sky130_fd_sc_hd__dfxtp_2": 352,
            "sky130_fd_sc_hd__inv_2": 287,
            "sky130_fd_sc_hd__mux2_1": 2273,
            "sky130_fd_sc_hd__nand2_2": 1156,
            "sky130_fd_sc_hd__nand2b_2": 270,
            "sky130_fd_sc_hd__nand3_2": 162,
            "sky130_fd_sc_hd__nand3b_2": 3,
            "sky130_fd_sc_hd__nand4_2": 82,
            "sky130_fd_sc_hd__nor2_2": 706,
            "sky130_fd_sc_hd__nor3_2": 33,
            "sky130_fd_sc_hd__nor3b_2": 2,
            "sky130_fd_sc_hd__nor4_2": 3,
            "sky130_fd_sc_hd__nor4b_2": 1,
            "sky130_fd_sc_hd__o211a_2": 78,
            "sky130_fd_sc_hd__o211ai_2": 44,
            "sky130_fd_sc_hd__o21a_2": 252,
            "sky130_fd_sc_hd__o21ai_2": 199,
            "sky130_fd_sc_hd__o21ba_2": 146,
            "sky130_fd_sc_hd__o21bai_2": 30,
            "sky130_fd_sc_hd__o221a_2": 2,
            "sky130_fd_sc_hd__o22a_2": 8,
            "sky130_fd_sc_hd__o22ai_2": 1,
            "sky130_fd_sc_hd__o2bb2a_2": 98,
            "sky130_fd_sc_hd__o311a_2": 23,
            "sky130_fd_sc_hd__o311ai_2": 1,
            "sky130_fd_sc_hd__o31a_2": 51,
            "sky130_fd_sc_hd__o31ai_2": 15,
            "sky130_fd_sc_hd__o32a_2": 6,
            "sky130_fd_sc_hd__o41a_2": 30,
            "sky130_fd_sc_hd__or2_2": 666,
            "sky130_fd_sc_hd__or3_2": 126,
            "sky130_fd_sc_hd__or3b_2": 30,
            "sky130_fd_sc_hd__or4_2": 25,
            "sky130_fd_sc_hd__or4b_2": 4,
            "sky130_fd_sc_hd__xnor2_2": 1065,
            "sky130_fd_sc_hd__xor2_2": 456
         }
      }
}

147. Printing statistics.

=== Systolic4x4_serial_io ===

   Number of wires:              16607
   Number of wire bits:          16607
   Number of public wires:        3506
   Number of public wire bits:    3506
   Number of ports:                 13
   Number of port bits:             13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16598
     sky130_fd_sc_hd__a2111o_2       2
     sky130_fd_sc_hd__a211o_2      126
     sky130_fd_sc_hd__a211oi_2      27
     sky130_fd_sc_hd__a21bo_2      203
     sky130_fd_sc_hd__a21boi_2      24
     sky130_fd_sc_hd__a21o_2       339
     sky130_fd_sc_hd__a21oi_2      396
     sky130_fd_sc_hd__a221o_2      513
     sky130_fd_sc_hd__a221oi_2       4
     sky130_fd_sc_hd__a22o_2       525
     sky130_fd_sc_hd__a22oi_2      137
     sky130_fd_sc_hd__a2bb2o_2     118
     sky130_fd_sc_hd__a311o_2        2
     sky130_fd_sc_hd__a311oi_2      19
     sky130_fd_sc_hd__a31o_2       219
     sky130_fd_sc_hd__a31oi_2       24
     sky130_fd_sc_hd__a32o_2       276
     sky130_fd_sc_hd__a41o_2         2
     sky130_fd_sc_hd__and2_2       949
     sky130_fd_sc_hd__and2b_2      250
     sky130_fd_sc_hd__and3_2       318
     sky130_fd_sc_hd__and3b_2       23
     sky130_fd_sc_hd__and4_2       194
     sky130_fd_sc_hd__and4b_2       72
     sky130_fd_sc_hd__and4bb_2       5
     sky130_fd_sc_hd__buf_2          1
     sky130_fd_sc_hd__dfrtp_2     3144
     sky130_fd_sc_hd__dfxtp_2      352
     sky130_fd_sc_hd__inv_2        287
     sky130_fd_sc_hd__mux2_1      2273
     sky130_fd_sc_hd__nand2_2     1156
     sky130_fd_sc_hd__nand2b_2     270
     sky130_fd_sc_hd__nand3_2      162
     sky130_fd_sc_hd__nand3b_2       3
     sky130_fd_sc_hd__nand4_2       82
     sky130_fd_sc_hd__nor2_2       706
     sky130_fd_sc_hd__nor3_2        33
     sky130_fd_sc_hd__nor3b_2        2
     sky130_fd_sc_hd__nor4_2         3
     sky130_fd_sc_hd__nor4b_2        1
     sky130_fd_sc_hd__o211a_2       78
     sky130_fd_sc_hd__o211ai_2      44
     sky130_fd_sc_hd__o21a_2       252
     sky130_fd_sc_hd__o21ai_2      199
     sky130_fd_sc_hd__o21ba_2      146
     sky130_fd_sc_hd__o21bai_2      30
     sky130_fd_sc_hd__o221a_2        2
     sky130_fd_sc_hd__o22a_2         8
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2      98
     sky130_fd_sc_hd__o311a_2       23
     sky130_fd_sc_hd__o311ai_2       1
     sky130_fd_sc_hd__o31a_2        51
     sky130_fd_sc_hd__o31ai_2       15
     sky130_fd_sc_hd__o32a_2         6
     sky130_fd_sc_hd__o41a_2        30
     sky130_fd_sc_hd__or2_2        666
     sky130_fd_sc_hd__or3_2        126
     sky130_fd_sc_hd__or3b_2        30
     sky130_fd_sc_hd__or4_2         25
     sky130_fd_sc_hd__or4b_2         4
     sky130_fd_sc_hd__xnor2_2     1065
     sky130_fd_sc_hd__xor2_2       456

   Chip area for module '\Systolic4x4_serial_io': 218868.662400
     of which used for sequential elements: 90096.409600 (41.16%)

148. Executing Verilog backend.
Dumping module `\Systolic4x4_serial_io'.

149. Executing JSON backend.
